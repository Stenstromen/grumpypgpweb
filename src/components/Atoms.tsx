import {
  ActionIcon,
  CloseButton,
  CopyButton,
  Input,
  PasswordInput,
  rem,
  Textarea,
  Tooltip,
} from "@mantine/core";
import {
  IconAt,
  IconCheck,
  IconCopy,
  IconHash,
  IconPasswordUser,
  IconTextColor,
} from "@tabler/icons-react";

export const KeyPairOutput: React.FC<{
  publicKey: string;
  privateKey: string;
}> = ({ publicKey, privateKey }) => {
  return (
    <>
      <Textarea
        leftSection={
          publicKey && (
            <CopyButton value={publicKey} timeout={2000}>
              {({ copied, copy }) => (
                <Tooltip
                  label={copied ? "Copied" : "Copy"}
                  withArrow
                  position="right"
                >
                  <ActionIcon
                    color={copied ? "teal" : "gray"}
                    variant="subtle"
                    onClick={copy}
                    size={"100%"}
                  >
                    {copied ? (
                      <IconCheck style={{ width: rem(16) }} />
                    ) : (
                      <IconCopy style={{ width: rem(16) }} />
                    )}
                  </ActionIcon>
                </Tooltip>
              )}
            </CopyButton>
          )
        }
        label="Public Key"
        value={publicKey}
        rows={10}
      />
      <Textarea
        leftSection={
          privateKey && (
            <CopyButton value={privateKey} timeout={2000}>
              {({ copied, copy }) => (
                <Tooltip
                  label={copied ? "Copied" : "Copy"}
                  withArrow
                  position="right"
                >
                  <ActionIcon
                    color={copied ? "teal" : "gray"}
                    variant="subtle"
                    onClick={copy}
                    size={"100%"}
                  >
                    {copied ? (
                      <IconCheck style={{ width: rem(16) }} />
                    ) : (
                      <IconCopy style={{ width: rem(16) }} />
                    )}
                  </ActionIcon>
                </Tooltip>
              )}
            </CopyButton>
          )
        }
        label="Private Key"
        value={privateKey}
        rows={10}
      />
    </>
  );
};

export const NameInput: React.FC<{
  name: string;
  setName: (value: string) => void;
}> = ({ name, setName }) => {
  return (
    <>
      <Input.Wrapper label="Name" description="Name of the key owner">
        <Input
          placeholder="Anonymous"
          leftSection={<IconTextColor size={16} />}
          value={name}
          onChange={(e) => setName(e.currentTarget.value)}
          rightSectionPointerEvents="all"
          rightSection={
            <CloseButton
              aria-label="Clear input"
              onClick={() => setName("")}
              style={{ display: name ? undefined : "none" }}
            />
          }
        />
      </Input.Wrapper>
    </>
  );
};

export const EmailInput: React.FC<{
  email: string;
  setEmail: (value: string) => void;
}> = ({ email, setEmail }) => {
  return (
    <>
      <Input.Wrapper label="Email" description="Email of the key owner">
        <Input
          placeholder="john.doe@example.com"
          leftSection={<IconAt size={16} />}
          value={email}
          onChange={(e) => setEmail(e.currentTarget.value)}
          rightSectionPointerEvents="all"
          rightSection={
            <CloseButton
              aria-label="Clear input"
              onClick={() => setEmail("")}
              style={{ display: email ? undefined : "none" }}
            />
          }
        />
      </Input.Wrapper>
    </>
  );
};

export const CommentInput: React.FC<{
  comment: string;
  setComment: (value: string) => void;
}> = ({ comment, setComment }) => {
  return (
    <>
      <Input.Wrapper label="Comment" description="Comment about the key">
        <Input
          placeholder="Generated by OpenPGP.js"
          leftSection={<IconHash size={16} />}
          value={comment}
          onChange={(e) => setComment(e.currentTarget.value)}
          rightSectionPointerEvents="all"
          rightSection={
            <CloseButton
              aria-label="Clear input"
              onClick={() => setComment("")}
              style={{ display: comment ? undefined : "none" }}
            />
          }
        />
      </Input.Wrapper>
    </>
  );
};

export const PasswordInputs: React.FC<{
  passphrase: string;
  setPassphrase: (value: string) => void;
  confirmPassphrase: string;
  setConfirmPassphrase: (value: string) => void;
  visible: boolean;
  toggle: () => void;
}> = ({
  passphrase,
  setPassphrase,
  confirmPassphrase,
  setConfirmPassphrase,
  visible,
  toggle,
}) => {
  return (
    <>
      <PasswordInput
        leftSection={<IconPasswordUser size={16} />}
        label="Password"
        defaultValue={passphrase}
        visible={visible}
        onVisibilityChange={toggle}
        required
        onChange={(e) => setPassphrase(e.currentTarget.value)}
      />
      <PasswordInput
        leftSection={<IconPasswordUser size={16} />}
        label="Confirm password"
        defaultValue={confirmPassphrase}
        visible={visible}
        onVisibilityChange={toggle}
        required
        onChange={(e) => setConfirmPassphrase(e.currentTarget.value)}
      />
    </>
  );
};
